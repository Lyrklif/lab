!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.defaultParams=t.toggle=t.show=t.hide=void 0;var o=r(n(2));t.show=o.default;var i=r(n(3));t.hide=i.default;var c=r(n(4));t.toggle=c.default;t.defaultParams={showClass:"show",hideClass:"hide",removeStyleInTheEnd:!0,callback:null}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=n(5),c=r(n(7));window.addEventListener("load",function(){window.show=o.show||{},window.hide=o.hide||{},window.toggle=o.toggle||{},window.getTransitionEndEventName=i.getTransitionEndEventName||{},window.transitionEndName=i.getTransitionEndEventName(),c.default()})},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var c=n(0);t.default=function(e,t){if(e&&!(e.offsetHeight>0)){var n=o(o({},c.defaultParams),t),r=n.showClass,i=n.hideClass,a=n.removeStyleInTheEnd,u=n.callback,s=e;s.style.height="0px",s.classList.remove("".concat(i));var l=s.scrollHeight;s.style.height="".concat(l,"px"),s.addEventListener("".concat(window.transitionEndName),function e(){s.classList.add("".concat(r)),a&&s.removeAttribute("style"),s.removeEventListener("".concat(window.transitionEndName),e),u&&u(!0)})}}},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var c=n(0);t.default=function(e,t){if(e){var n=o(o({},c.defaultParams),t),r=n.showClass,i=n.hideClass,a=n.removeStyleInTheEnd,u=n.callback,s=e,l=e.scrollHeight,d=s.style.transition;s.style.transition="",requestAnimationFrame(function(){s.style.height="".concat(l,"px"),s.style.transition=d,requestAnimationFrame(function(){s.style.height="0px"})}),s.addEventListener("".concat(window.transitionEndName),function e(){s.classList.add("".concat(i)),s.classList.remove("".concat(r)),a&&s.removeAttribute("style"),s.removeEventListener("".concat(window.transitionEndName),e),u&&u(!0)})}}},function(e,t,n){"use strict";function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var c=n(0);t.default=function(e,t){if(e){var n=o(o({},c.defaultParams),t),r=n.hideClass,i=e;i.classList.contains("".concat(r))?c.show(i,n):c.hide(i,n)}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getTransitionEndEventName=void 0;var o=r(n(6));t.getTransitionEndEventName=o.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.createElement("div");return["transitionend","oTransitionEnd","transitionend","webkitTransitionEnd"].forEach(function(t){if(void 0!==e.style[t])return t}),"transitionend"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=document.querySelector(".js-show"),t=document.querySelector(".js-hide"),n=document.querySelector(".js-toggle"),r=document.querySelector(".js-hidden-block");return e&&r&&e.addEventListener("click",function(){window.show(r)}),t&&r&&t.addEventListener("click",function(){window.hide(r,{callback:function(){console.log("Слок скрыт")}})}),n&&r&&n.addEventListener("click",function(){window.toggle(r)}),!0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,